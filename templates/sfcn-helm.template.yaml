AWSTemplateFormatVersion: "2010-09-09"

Description: A nested stack of Cisco Secure Firewall Cloud Native that installs Secure Firewall Helm chart into an existing cluster.

Parameters:
  ClusterID:
    AllowedPattern: ".+"
    Type: String

  Version:
    Type: String
    AllowedPattern: ".+"
    Description: Helm chart version

  DevhubApiKey:
    Type: String
    NoEcho: True
    AllowedPattern: ".+"
    Description: API key obtained from Cisco Devhub account

  DevhubUsername:
    Type: String
    AllowedPattern: ".+"
    Description: Username of Cisco Devhub account

  SystemNamespace:
    Type: String
    AllowedPattern: ".+"
    Default: sfcn-system

  DataplaneNamespace:
    Type: String
    Default: ""

  Controlplane:
    Type: String
    AllowedValues: [ Enabled, Disabled ]
    Default: Enabled
    Description: Install Secure Firewall controlplane as part of Helm release

  Dataplane:
    Type: String
    AllowedValues: [ Enabled, Disabled ]
    Default: Enabled
    Description: Install Secure Firewall dataplane as part of Helm release

  SmartLicenseToken:
    Type: String
    NoEcho: true

  MaxLicenseCount:
    Type: Number

  StorageType:
    Type: String
    AllowedValues: [ local, efs ]
    Default: local
    Description: The type of a storage used to keep logs and deployments files.

  EnforcerConfigurationTier:
    Description: Instance tier to be used by enforcer workers
    Default: "vCPU4"
    Type: String
    AllowedValues: [ "vCPU4" ]
    ConstraintDescription: must specify vCPU4

  EnforcerCachePort:
    Type: Number
    Default: 6379
    MinValue: 1
    MaxValue: 65535
    Description: Port number to use for communicating with Redis server

  EnforcerServiceRoles:
    Type: String
    Default: default
    AllowedPattern: "[a-zA-Z0-9-]{3,15}(,[a-zA-Z0-9-]{3,15})*"
    AllowedValues: [ "default", "default,vpnredirector" ]
    ConstraintDescription: |
      Role should be alphanumeric and can contain the special character, hyphen (-). Role must be at least 3 characters
      and upto 15 characters long.
    Description: |
      Service roles of ASA separated by comma, no spaces allowed. If choosing the multiple service role option, ensure that at
      least as many enforcer worker nodes is set as the desired number for faster deployment

  EnforcerCacheAuthToken:
    Type: String
    NoEcho: true
    MaxLength: 128
    AllowedPattern: "([a-zA-Z0-9!&#$^><-]{16,128})?"
    Default: ""
    ConstraintDescription: Must be blank or contain at least 16 and up to 128 alphanumeric or allowed special characters
    Description: |
      Blank or 16-128 alphanumeric characters. Only permitted special characters are !, &, #, $, ^, <, >, and -.
      Takes effect only if in-transit encryption is enabled

  EnforcerAutoscaling:
    Type: String
    AllowedValues: [ Enabled, Disabled ]
    Default: Disabled
    Description: Enable scaling of ASA with default metrics

  EnforcerCacheHost:
    Type: String
    Default: ""

  Name:
    Type: String
    Description: Helm chart release name

Conditions:
  EnforcerAutoscalingEnabled: !Equals [ !Ref EnforcerAutoscaling, Enabled ]
  DataplaneEnabled: !Equals [ !Ref Dataplane, Enabled ]
  ControlplaneEnabled: !Equals [ !Ref Controlplane, Enabled ]
  DataplaneNamespaceProvided: !Not [ !Equals [ !Ref DataplaneNamespace, "" ] ]
  DefaultRolePresent: !Or
    - !Equals [ !Ref EnforcerServiceRoles, "default" ]
    - !Equals [ !Ref EnforcerServiceRoles, "default,vpnredirector" ]
  VpnRedirectorRolePresent: !Equals [ !Ref EnforcerServiceRoles, "default,vpnredirector" ]
  LicenseTokenProvided: !Not [ !Equals [ !Ref SmartLicenseToken, "" ] ]
  LicenseTokenProvided&DefaultRolePresent: !And
    - !Condition LicenseTokenProvided
    - !Condition DefaultRolePresent
  LicenseTokenProvided&VpnRedirectorRolePresent: !And
    - !Condition LicenseTokenProvided
    - !Condition VpnRedirectorRolePresent

Resources:
  ChartName:
    Type: Custom::CliQuery
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:eks-quickstart-ResourceReader'
      AwsCliCommand: !Sub |
        ssm get-parameters --names /CSFCN/${ClusterID}/firewallChartName --query '{Value: Parameters[0].Value || `sfcn-bundle`}'
      IdField: 'Value'

  ChartRepo:
    Type: Custom::CliQuery
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:eks-quickstart-ResourceReader'
      AwsCliCommand: !Sub |
        ssm get-parameters --names /CSFCN/${ClusterID}/firewallChartRepo --query '{Value: Parameters[0].Value || `https://devhub.cisco.com/artifactory/asac-ci-helm`}'
      IdField: 'Value'

  ContainerRegistry:
    Type: Custom::CliQuery
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:eks-quickstart-ResourceReader'
      AwsCliCommand: !Sub |
        ssm get-parameters --names /CSFCN/${ClusterID}/firewallContainerRegistry --query '{Value: Parameters[0].Value || `709825985650.dkr.ecr.us-east-1.amazonaws.com`}'
      IdField: 'Value'

  ArtifactoryRepo:
    Type: Custom::CliQuery
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:eks-quickstart-ResourceReader'
      AwsCliCommand: !Sub |
        ssm get-parameters --names /CSFCN/${ClusterID}/firewallContainerRepo --query '{Value: Parameters[0].Value || `cisco`}'
      IdField: 'Value'

  LicensingEnabled:
    Type: Custom::CliQuery
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:eks-quickstart-ResourceReader'
      AwsCliCommand: !Sub |
        ssm get-parameters --names /CSFCN/${ClusterID}/licensingEnabled --query '{Value: Parameters[0].Value || `"true"`}'
      IdField: 'Value'

  SecureFirewall:
    Type: "AWSQS::Kubernetes::Helm"
    Properties:
      ClusterID: !Ref ClusterID
      Name: !Ref Name
      Namespace: !Ref SystemNamespace
      Chart: !Ref ChartName
      Version: !Ref Version
      Repository: !Ref ChartRepo
      RepositoryOptions:
        Username: !Ref DevhubUsername
        Password: !Ref DevhubApiKey
      Values:
        "global.acceptEULA": "yes"
        "global.platform": "eks"
        "global.storageType": !Ref StorageType
        "global.imageCredentials.registry": !Ref ContainerRegistry
        "global.imageCredentials.artifactoryRepo": !Ref ArtifactoryRepo
        "global.imageCredentials.username": !Ref DevhubUsername
        "global.imageCredentials.password": !Ref DevhubApiKey
        "global.dataPlaneNamespace": !If [ DataplaneNamespaceProvided, !Ref DataplaneNamespace, !Ref SystemNamespace ]
        "tags.controlPlane": !If [ ControlplaneEnabled, "true", "false" ]
        "tags.dataPlane": !If [ DataplaneEnabled, "true", "false" ]
        "dataPlane.serviceRoles": !Sub "{${EnforcerServiceRoles}}"
        "dataPlane.redis.host": !Ref EnforcerCacheHost
        "dataPlane.redis.port": !Ref EnforcerCachePort
        "dataPlane.redis.token": !Ref EnforcerCacheAuthToken
        "dataPlane.hpa.enable": !If [ EnforcerAutoscalingEnabled, "true", "false" ]
        "dataPlane.configurationTier": !Ref EnforcerConfigurationTier
        "dataPlane.enableLicensing": !Ref LicensingEnabled
        "scaledown.enable": !If [ EnforcerAutoscalingEnabled, "true", "false" ]

  CSSMSecret:
    DependsOn: SecureFirewall
    Condition: LicenseTokenProvided
    Type: AWSQS::Kubernetes::Resource
    Properties:
      ClusterName: !Ref ClusterID
      Namespace: !If [ DataplaneNamespaceProvided, !Ref DataplaneNamespace, !Ref SystemNamespace ]
      Manifest: !Sub
        - |-
          apiVersion: v1
          kind: Secret
          metadata:
            name: cssm-token
          data:
            token: ${token}
        - token:
            Fn::Base64: !Ref SmartLicenseToken

  SmartLicenseDefault:
    DependsOn: CSSMSecret
    Type: AWSQS::Kubernetes::Resource
    Condition: LicenseTokenProvided&DefaultRolePresent
    Properties:
      ClusterName: !Ref ClusterID
      Namespace: !If [ DataplaneNamespaceProvided, !Ref DataplaneNamespace, !Ref SystemNamespace ]
      Manifest: !Sub
        - |-
          apiVersion: sfcn.cisco.com/v1
          kind: SmartLicense
          metadata:
            name: sfcn-enforcer
          spec:
            action: "REGISTER"
            tokenSecret:
              name: cssm-token
              namespace: ${tokenNamespace}
            minLicenseCount: 1
            maxLicenseCount: ${MaxLicenseCount}
            scalingRef:
              kind: ${scalingRefKind}
              name: sfcn-enforcer
        - tokenNamespace: !If [ DataplaneNamespaceProvided, !Ref DataplaneNamespace, !Ref SystemNamespace ]
          scalingRefKind: !If [ EnforcerAutoscalingEnabled, "HorizontalPodAutoscaler", "Deployment" ]

  SmartLicenseVpnRedirector:
    DependsOn: CSSMSecret
    Type: AWSQS::Kubernetes::Resource
    Condition: LicenseTokenProvided&VpnRedirectorRolePresent
    Properties:
      ClusterName: !Ref ClusterID
      Namespace: !If [ DataplaneNamespaceProvided, !Ref DataplaneNamespace, !Ref SystemNamespace ]
      Manifest: !Sub
        - |-
          apiVersion: sfcn.cisco.com/v1
          kind: SmartLicense
          metadata:
            name: sfcn-vpnredirector-enforcer
          spec:
            action: "REGISTER"
            tokenSecret:
              name: cssm-token
              namespace: ${tokenNamespace}
            minLicenseCount: 1
            maxLicenseCount: 5
            scalingRef:
              kind: Deployment
              name: sfcn-vpnredirector-enforcer
        - tokenNamespace: !If [ DataplaneNamespaceProvided, !Ref DataplaneNamespace, !Ref SystemNamespace ]
